// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: helloworld/hello.proto

package helloworld

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RouteGuideClient is the client API for RouteGuide service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouteGuideClient interface {
	// 定义方法 普通模式
	GetFeature(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Feature, error)
	// 服务端流模式
	GetServeStream(ctx context.Context, in *Point, opts ...grpc.CallOption) (RouteGuide_GetServeStreamClient, error)
	// 客户端流模式
	PutServeStream(ctx context.Context, opts ...grpc.CallOption) (RouteGuide_PutServeStreamClient, error)
	// 双向流模式
	AllServeStream(ctx context.Context, opts ...grpc.CallOption) (RouteGuide_AllServeStreamClient, error)
}

type routeGuideClient struct {
	cc grpc.ClientConnInterface
}

func NewRouteGuideClient(cc grpc.ClientConnInterface) RouteGuideClient {
	return &routeGuideClient{cc}
}

func (c *routeGuideClient) GetFeature(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/RouteGuide/GetFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routeGuideClient) GetServeStream(ctx context.Context, in *Point, opts ...grpc.CallOption) (RouteGuide_GetServeStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &RouteGuide_ServiceDesc.Streams[0], "/RouteGuide/GetServeStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &routeGuideGetServeStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RouteGuide_GetServeStreamClient interface {
	Recv() (*Feature, error)
	grpc.ClientStream
}

type routeGuideGetServeStreamClient struct {
	grpc.ClientStream
}

func (x *routeGuideGetServeStreamClient) Recv() (*Feature, error) {
	m := new(Feature)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routeGuideClient) PutServeStream(ctx context.Context, opts ...grpc.CallOption) (RouteGuide_PutServeStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &RouteGuide_ServiceDesc.Streams[1], "/RouteGuide/PutServeStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &routeGuidePutServeStreamClient{stream}
	return x, nil
}

type RouteGuide_PutServeStreamClient interface {
	Send(*Point) error
	CloseAndRecv() (*Feature, error)
	grpc.ClientStream
}

type routeGuidePutServeStreamClient struct {
	grpc.ClientStream
}

func (x *routeGuidePutServeStreamClient) Send(m *Point) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routeGuidePutServeStreamClient) CloseAndRecv() (*Feature, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Feature)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routeGuideClient) AllServeStream(ctx context.Context, opts ...grpc.CallOption) (RouteGuide_AllServeStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &RouteGuide_ServiceDesc.Streams[2], "/RouteGuide/AllServeStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &routeGuideAllServeStreamClient{stream}
	return x, nil
}

type RouteGuide_AllServeStreamClient interface {
	Send(*Point) error
	Recv() (*Feature, error)
	grpc.ClientStream
}

type routeGuideAllServeStreamClient struct {
	grpc.ClientStream
}

func (x *routeGuideAllServeStreamClient) Send(m *Point) error {
	return x.ClientStream.SendMsg(m)
}

func (x *routeGuideAllServeStreamClient) Recv() (*Feature, error) {
	m := new(Feature)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RouteGuideServer is the server API for RouteGuide service.
// All implementations must embed UnimplementedRouteGuideServer
// for forward compatibility
type RouteGuideServer interface {
	// 定义方法 普通模式
	GetFeature(context.Context, *Point) (*Feature, error)
	// 服务端流模式
	GetServeStream(*Point, RouteGuide_GetServeStreamServer) error
	// 客户端流模式
	PutServeStream(RouteGuide_PutServeStreamServer) error
	// 双向流模式
	AllServeStream(RouteGuide_AllServeStreamServer) error
	mustEmbedUnimplementedRouteGuideServer()
}

// UnimplementedRouteGuideServer must be embedded to have forward compatible implementations.
type UnimplementedRouteGuideServer struct {
}

func (UnimplementedRouteGuideServer) GetFeature(context.Context, *Point) (*Feature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeature not implemented")
}
func (UnimplementedRouteGuideServer) GetServeStream(*Point, RouteGuide_GetServeStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetServeStream not implemented")
}
func (UnimplementedRouteGuideServer) PutServeStream(RouteGuide_PutServeStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PutServeStream not implemented")
}
func (UnimplementedRouteGuideServer) AllServeStream(RouteGuide_AllServeStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AllServeStream not implemented")
}
func (UnimplementedRouteGuideServer) mustEmbedUnimplementedRouteGuideServer() {}

// UnsafeRouteGuideServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouteGuideServer will
// result in compilation errors.
type UnsafeRouteGuideServer interface {
	mustEmbedUnimplementedRouteGuideServer()
}

func RegisterRouteGuideServer(s grpc.ServiceRegistrar, srv RouteGuideServer) {
	s.RegisterService(&RouteGuide_ServiceDesc, srv)
}

func _RouteGuide_GetFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Point)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteGuideServer).GetFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RouteGuide/GetFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteGuideServer).GetFeature(ctx, req.(*Point))
	}
	return interceptor(ctx, in, info, handler)
}

func _RouteGuide_GetServeStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Point)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RouteGuideServer).GetServeStream(m, &routeGuideGetServeStreamServer{stream})
}

type RouteGuide_GetServeStreamServer interface {
	Send(*Feature) error
	grpc.ServerStream
}

type routeGuideGetServeStreamServer struct {
	grpc.ServerStream
}

func (x *routeGuideGetServeStreamServer) Send(m *Feature) error {
	return x.ServerStream.SendMsg(m)
}

func _RouteGuide_PutServeStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouteGuideServer).PutServeStream(&routeGuidePutServeStreamServer{stream})
}

type RouteGuide_PutServeStreamServer interface {
	SendAndClose(*Feature) error
	Recv() (*Point, error)
	grpc.ServerStream
}

type routeGuidePutServeStreamServer struct {
	grpc.ServerStream
}

func (x *routeGuidePutServeStreamServer) SendAndClose(m *Feature) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routeGuidePutServeStreamServer) Recv() (*Point, error) {
	m := new(Point)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RouteGuide_AllServeStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RouteGuideServer).AllServeStream(&routeGuideAllServeStreamServer{stream})
}

type RouteGuide_AllServeStreamServer interface {
	Send(*Feature) error
	Recv() (*Point, error)
	grpc.ServerStream
}

type routeGuideAllServeStreamServer struct {
	grpc.ServerStream
}

func (x *routeGuideAllServeStreamServer) Send(m *Feature) error {
	return x.ServerStream.SendMsg(m)
}

func (x *routeGuideAllServeStreamServer) Recv() (*Point, error) {
	m := new(Point)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RouteGuide_ServiceDesc is the grpc.ServiceDesc for RouteGuide service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RouteGuide_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RouteGuide",
	HandlerType: (*RouteGuideServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFeature",
			Handler:    _RouteGuide_GetFeature_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetServeStream",
			Handler:       _RouteGuide_GetServeStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PutServeStream",
			Handler:       _RouteGuide_PutServeStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "AllServeStream",
			Handler:       _RouteGuide_AllServeStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "helloworld/hello.proto",
}
